Linux内存管理
################

:title: Linux内存管理
:date: 2021-02-20 17:30
:category: 学习
:tags: Memory
:author: Hanbin


Linux 内存管理

------

说到Linux内存管理，首先就要看一下一个Linux程序的内存分布：
(网图，侵权请联系)

.. figure:: ./resource/img/20210220_Linux-nei-cun-guan-li/001.jpeg
    :alt: No Image

一般情况Linux为程序提供多达4GB的内存空间可供使用。
该4GB被分为两个部分，用户空间与内核空间。 0～3GB为用户空间，程序间是相互独立的。3～4GB为内核空间，程序间是共享的。
内核空间中，从3G到vmalloc_start这段地址是物理内存映射区域（该区域中包含了内核镜像、物理页框表mem_map等等）。
在物理内存映射区之后，就是vmalloc区域。(在物理内存映射区与vmalloc_start期间还存在一个8M的gap 来防止跃界)。
vmalloc_end的位置接近4G(最后位置系统会保留一片128k大小的区域用于专用页面映射)。

其次，要理解一下内存水位(watermark).
Linux对内存定义了三个水位：

  HIGH: 系统的free内存高于HIGH水位时是比较安全的，不需要急着作内存回收。

  LOW: 当free内存达到LOW水位时，需要抓紧时间进行内存回收，即后台启动kswapd程序。回收的目标是使free内存恢复至HIGH水位。

  MIN: 值系统应该保有的最小free内存。当free内存达到MIN时，kswapd的后台回收可能已经来不及释放出足够内存供系统使用。此时一般在用户申请内存时直接执行内存回收(DIRRECT RECLAIM)。

MIN水位一般由系统自动计算，在我的电脑上它是45056：

::

  # cat /proc/sys/vm/min_free_kbytes
  # 45056

而LOW水位一般是MIN的125%，HIGH水位一般是MIN的150%。



kmalloc
=========

kmalloc申请一段物理上连续的内存，其虚拟内存地址也是连续的。申请的大小不能超过一个page，即一般小于128kb。并且不对申请的内存空间清零。

::

  void *kmalloc(size_t size, int flags);


flags有如下几个定义：

  GFP_ATOMIC 允许从MIN水位以下申请一定数量内存，一定数量是不能影响更紧急的内存申请(比如PF_MEMALLOC)。通常它可以触及MIN内存的1/2 ~ 1/4。注意，GFP_ATOMIC不会触发内存回收动作，即立刻返回申请结果，故通常多被用于中断处理。

  GFP_KERNEL 最通用的内核内存申请。当内存低于MIN时会触发内存回收，并进入睡眠直到内存足够可用。注意此接口在内存不足时会产生睡眠动作。不应该被用于中断等实时性要求高的场合。

  GFP_USER   用户空间内存申请。也会在内存不足时产生睡眠动作。

  GFP_HIGHUSER 同“GFP_USER”，但是从高端内存开始分配。

  GFP_NOIO/GFP_NOFS 类似“GFP_KERNEL”， 但不允许IO或文件系统(FS)操作。

  __GFP_DMA  可选参数，要求分配可以DMA的内存区域。平台依赖。

  __GFP_HIGHMEM  可选参数，要求分配的内存可以位于高端空间。

  __GFP_COLD 可选参数，请求分配一个冷页，即一段时间没有被使用的内存。

  __GFP_NOWARN 可选参数，当分配失败时不发出警告。

  __GFP_HIGH 可选参数，高优先级请求，可以分配保留空间。

  __GFP_REPEAT 可选参数，指示尽可能分配，但结果仍然可以失败。

  __GFP_NOFAIL 可选参数，不允许分配失败，尽最大可能满足要求。

  __GFP_NORETRY 可选参数，如果失败则立刻返回。

  __GFP_ZERO 可选参数，清零申请到的内存。

关于size，内核只能分配某些预定义的, 固定大小的字节数组。如果你请求一个任意数量内存,你可能得到稍微多于你请求的, 至多是2倍数量。
并且，kmalloc 能够处理的最小分配是32或者64字节。

kzalloc
=========

是kmalloc加上__GFP_ZERO参数。

vmalloc
=========

vmalloc用于申请较大内核空间内存，申请到的内存在虚拟地址上是连续的。但物理空间上不一定连续。位于vmalloc_start～vmalloc_end之间。

malloc
========

malloc用于申请用户空间内存。
它有一个将可用的内存块连接为一个长长的列表的所谓空闲链表(全局变量，一个内存块的链表指针)。
调用malloc函数时，它沿连接表寻找一个大到足以满足用户请求所需要的内存块。
然后将该内存块一分为二（一块的大小与用户请求的大小相等，另一块的大小就是剩下的字节）。
接下来，将分配给用户的那块内存传给用户，并将剩下的那块（如果有的话）返回到连接表上。
调用free函数时，它将用户释放的内存块连接到空闲链上。
到最后，空闲链会被切成很多的小内存片段，如果这时用户申请一个大的内存片段，那么空闲链上可能没有可以满足用户要求的片段了。
于是，malloc函数请求延时，并开始在空闲链上翻箱倒柜地检查各内存片段，对它们进行整理，将相邻的小空闲块合并成较大的内存块。

有经验的程序员通常总是分配大小为2的幂的内存块，而最大限度地降低潜在的malloc性能丧失。
也就是说，所分配的内存块大小为4字节、8字节、16 字节等等。
这样做最大限度地减少了进入空闲链的怪异片段（各种尺寸的小片段都有）的数量。
尽管看起来这好像浪费了空间，但也容易看出浪费的空间永远不会超过50%。



End

70%